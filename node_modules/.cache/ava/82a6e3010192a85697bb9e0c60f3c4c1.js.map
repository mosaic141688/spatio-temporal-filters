{"version":3,"sources":["no-tatck.test.js"],"names":["ava","require","Feature","village_boxes","district_boxes","record_points","feature_in_box","feature","box_feature","lat","box","lng","push","id","test","t","f","decorate_feature","true","hasOwnProperty","expected_id","actual_id","deepEqual","decoration","filter_id","forEach","p","filtered_record_points","filter","point","expected_district_ids","actual_district_ids","map"],"mappings":"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","file":"no-tatck.test.js","sourcesContent":["const ava = require(\"ava\")\nconst Feature = require(\"../no-stacks\").Feature\n\nconst village_boxes = [];\nconst district_boxes = [];\nconst record_points = [];\n\n\n\nconst feature_in_box = function(feature, box_feature){\n    return feature.lat>box_feature.box[0].lat\n            &&\n            feature.lat<box_feature.box[1].lat\n            &&\n            feature.lng>box_feature.box[0].lng\n            &&\n            feature.lng<box_feature.box[2].lng\n}\n\nrecord_points.push(new Feature({id:1,lat:1,lng:2}));\nrecord_points.push(new Feature({id:2,lat:11,lng:12}));\nrecord_points.push(new Feature({id:3,lat:23,lng:24}));\nrecord_points.push(new Feature({id:4,lat:101,lng:102}));\nrecord_points.push(new Feature({id:5,lat:111,lng:112}));\nrecord_points.push(new Feature({id:6,lat:121,lng:122}));\n\n\n\n\ndistrict_boxes.push(new Feature({\n    id:1,\n    box:[\n        {\n            lat:0,\n            lng:0\n        },\n        {\n            lat:100,\n            lng:0\n        },\n        {\n            lat:100,\n            lng:100\n        },\n        {\n            lat:0,\n            lng:100\n        }\n    ]\n}))\n\ndistrict_boxes.push(new Feature({\n    id:2,\n    box:[\n        {\n            lat:100,\n            lng:100\n        },\n        {\n            lat:200,\n            lng:100\n        },\n        {\n            lat:200,\n            lng:200\n        },\n        {\n            lat:100,\n            lng:200\n        }\n    ]\n}))\n\nvillage_boxes.push(\n{\n    id:1,\n    box:[\n        {\n            lat:0,\n            lng:0\n        },\n        {\n            lat:10,\n            lng:0\n        },\n        {\n            lat:10,\n            lng:10\n        },\n        {\n            lat:0,\n            lng:10\n        }\n    ]\n}\n)\n\nvillage_boxes.push(\n    {\n        id:2,\n        box:[\n            {\n                lat:10,\n                lng:10\n            },\n            {\n                lat:20,\n                lng:10\n            },\n            {\n                lat:20,\n                lng:20\n            },\n            {\n                lat:10,\n                lng:20\n            }\n        ]\n    }\n    )\n\n    village_boxes.push(\n        {\n            id:3,\n            box:[\n                {\n                    lat:20,\n                    lng:20\n                },\n                {\n                    lat:30,\n                    lng:20\n                },\n                {\n                    lat:30,\n                    lng:30\n                },\n                {\n                    lat:20,\n                    lng:30\n                }\n            ]\n        }\n        )\n\n\n        village_boxes.push(\n            {\n                id:4,\n                box:[\n                    {\n                        lat:100,\n                        lng:100\n                    },\n                    {\n                        lat:110,\n                        lng:100\n                    },\n                    {\n                        lat:110,\n                        lng:110\n                    },\n                    {\n                        lat:100,\n                        lng:110\n                    }\n                ]\n            }\n            )\n            \n        \n            village_boxes.push(\n                {\n                    id:5,\n                    box:[\n                        {\n                            lat:110,\n                            lng:110\n                        },\n                        {\n                            lat:120,\n                            lng:110\n                        },\n                        {\n                            lat:120,\n                            lng:120\n                        },\n                        {\n                            lat:110,\n                            lng:120\n                        }\n                    ]\n                }\n                )\n\n\n        village_boxes.push(\n            {\n                id:6,\n                box:[\n                    {\n                        lat:130,\n                        lng:130\n                    },\n                    {\n                        lat:140,\n                        lng:130\n                    },\n                    {\n                        lat:140,\n                        lng:140\n                    },\n                    {\n                        lat:130,\n                        lng:140\n                    }\n                ]\n            }\n            )\n            \n                \n    \nava.test('decorated',t =>{\n    let f = new Feature({id:2,lat:1.123,lng:2.123})\n    \n    f.decorate_feature('village_id',feature_in_box,village_boxes)\n    t.true(f.hasOwnProperty('village_id'))\n})\n\nava.test('decoreted with expected id', t => {\n    let f = new Feature({id:2,lat:1.123,lng:2.123})\n    \n    f.decorate_feature('village_id',feature_in_box,village_boxes)\n    let expected_id = 1\n    let actual_id = f['village_id']\n    t.deepEqual(expected_id,actual_id)\n})\n\n\nava.test('decoreted with expected district id', t => {\n    let f = new Feature({id:2,lat:1.123,lng:2.123})\n    \n    f.decorate_feature('district_id',feature_in_box,district_boxes)\n    let expected_id = 1\n    let actual_id = f['district_id']\n    t.deepEqual(expected_id,actual_id)\n})\n\nava.test('filter by district', t => {\n\n    let decoration = 'district_id'\n    let filter_id = 1;\n    record_points.forEach(p => p.decorate_feature(decoration,feature_in_box,district_boxes))\n  \n    //Filter \n    let filtered_record_points = record_points.filter(point => point[decoration]==filter_id)\n    let expected_district_ids = [1,1,1]\n    let actual_district_ids = filtered_record_points.map(point => point[decoration])\n\n    t.deepEqual(expected_district_ids,actual_district_ids)\n})\n\nava.test('filter by village', t => {\n    let decoration = 'village_id'\n    let filter_id = 1;\n    //Decorate Stage\n    record_points.forEach(p => p.decorate_feature(decoration,feature_in_box,village_boxes))\n  \n    //Filter \n    let filtered_record_points = record_points.filter(point => point[decoration]==filter_id)\n    let expected_district_ids = [1,1,1]\n    let actual_district_ids = filtered_record_points.map(point => point[decoration])\n\n    t.deepEqual(expected_district_ids,actual_district_ids)\n})\n\n\n\n"]}