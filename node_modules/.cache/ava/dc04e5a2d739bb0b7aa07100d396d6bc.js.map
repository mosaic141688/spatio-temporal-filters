{"version":3,"sources":["no-tatck.test.js"],"names":["ava","require","Feature","village_boxes","district_boxes","record_points","push","id","box","lat","lng","test","t","f","feature_in_box","feature","box_feature","decorate_feature","true","hasOwnProperty","expected_id","actual_id","deepEqual","decoration","filter_id","decorated_record_points","map","p","filtered_record_points","filter","point","console","log"],"mappings":"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","file":"no-tatck.test.js","sourcesContent":["const ava = require(\"ava\")\nconst Feature = require(\"../no-stacks\").Feature\n\nconst village_boxes = [];\nconst district_boxes = [];\nconst record_points = [];\n\ndistrict_boxes.push(new Feature({\n    id:1,\n    box:[\n        {\n            lat:0,\n            lng:0\n        },\n        {\n            lat:100,\n            lng:0\n        },\n        {\n            lat:100,\n            lng:100\n        },\n        {\n            lat:0,\n            lng:100\n        }\n    ]\n}))\n\ndistrict_boxes.push(new Feature({\n    id:2,\n    box:[\n        {\n            lat:100,\n            lng:100\n        },\n        {\n            lat:200,\n            lng:100\n        },\n        {\n            lat:200,\n            lng:200\n        },\n        {\n            lat:100,\n            lng:200\n        }\n    ]\n}))\n\nvillage_boxes.push(\n{\n    id:1,\n    box:[\n        {\n            lat:0,\n            lng:0\n        },\n        {\n            lat:10,\n            lng:0\n        },\n        {\n            lat:10,\n            lng:10\n        },\n        {\n            lat:0,\n            lng:10\n        }\n    ]\n}\n)\n\nvillage_boxes.push(\n    {\n        id:2,\n        box:[\n            {\n                lat:10,\n                lng:10\n            },\n            {\n                lat:20,\n                lng:10\n            },\n            {\n                lat:20,\n                lng:20\n            },\n            {\n                lat:10,\n                lng:20\n            }\n        ]\n    }\n    )\n\n    village_boxes.push(\n        {\n            id:3,\n            box:[\n                {\n                    lat:20,\n                    lng:20\n                },\n                {\n                    lat:30,\n                    lng:20\n                },\n                {\n                    lat:30,\n                    lng:30\n                },\n                {\n                    lat:20,\n                    lng:30\n                }\n            ]\n        }\n        )\n\n\n        village_boxes.push(\n            {\n                id:4,\n                box:[\n                    {\n                        lat:100,\n                        lng:100\n                    },\n                    {\n                        lat:110,\n                        lng:100\n                    },\n                    {\n                        lat:110,\n                        lng:110\n                    },\n                    {\n                        lat:100,\n                        lng:110\n                    }\n                ]\n            }\n            )\n            \n        \n            village_boxes.push(\n                {\n                    id:5,\n                    box:[\n                        {\n                            lat:110,\n                            lng:110\n                        },\n                        {\n                            lat:120,\n                            lng:110\n                        },\n                        {\n                            lat:120,\n                            lng:120\n                        },\n                        {\n                            lat:110,\n                            lng:120\n                        }\n                    ]\n                }\n                )\n\n\n        village_boxes.push(\n            {\n                id:6,\n                box:[\n                    {\n                        lat:130,\n                        lng:130\n                    },\n                    {\n                        lat:140,\n                        lng:130\n                    },\n                    {\n                        lat:140,\n                        lng:140\n                    },\n                    {\n                        lat:130,\n                        lng:140\n                    }\n                ]\n            }\n            )\n            \n                \n    \nava.test('decorated',t =>{\n    let f = new Feature({id:2,lat:1.123,lng:2.123})\n    \n    var feature_in_box = function(feature, box_feature){\n        return feature.lat>box_feature.box[0].lat\n                &&\n                feature.lat<box_feature.box[1].lat\n                &&\n                feature.lng>box_feature.box[0].lng\n                &&\n                feature.lng<box_feature.box[2].lng\n    }\n    \n    f.decorate_feature('village_id',feature_in_box,village_boxes)\n    t.true(f.hasOwnProperty('village_id'))\n})\n\nava.test('decoreted with expected id', t => {\n    let f = new Feature({id:2,lat:1.123,lng:2.123})\n    \n    var feature_in_box = function(feature, box_feature){\n        return feature.lat>box_feature.box[0].lat\n                &&\n                feature.lat<box_feature.box[1].lat\n                &&\n                feature.lng>box_feature.box[0].lng\n                &&\n                feature.lng<box_feature.box[2].lng\n    }\n    \n    f.decorate_feature('village_id',feature_in_box,village_boxes)\n    let expected_id = 1\n    let actual_id = f['village_id']\n    t.deepEqual(expected_id,actual_id)\n})\n\n\nava.test('decoreted with expected district id', t => {\n    let f = new Feature({id:2,lat:1.123,lng:2.123})\n    \n    var feature_in_box = function(feature, box_feature){\n        return feature.lat>box_feature.box[0].lat\n                &&\n                feature.lat<box_feature.box[1].lat\n                &&\n                feature.lng>box_feature.box[0].lng\n                &&\n                feature.lng<box_feature.box[2].lng\n    }\n    \n    f.decorate_feature('district_id',feature_in_box,district_boxes)\n    let expected_id = 1\n    let actual_id = f['district_id']\n    t.deepEqual(expected_id,actual_id)\n})\n\nava.test('filter by district', t => {\n    record_points.push(new Feature({id:1,lat:22,lng:22}));\n    record_points.push(new Feature({id:1,lat:23,lng:23}));\n    record_points.push(new Feature({id:1,lat:32,lng:32}));\n    record_points.push(new Feature({id:1,lat:33,lng:33}));\n    record_points.push(new Feature({id:1,lat:21,lng:21}));\n    record_points.push(new Feature({id:1,lat:24,lng:22}));\n\n    let decoration = 'district_id'\n    let filter_id = 1;\n    let decorated_record_points = record_points.map(p => p.decorate_feature(decoration,feature_in_box,district_boxes))\n\n    //Filter \n    let filtered_record_points = decorated_record_points.filter(point => point[decoration]==filter_id)\n    console.log(filtered_record_points)\n})"]}